* Prolog Sudoku Solver

This is a simple solver using Prolog and the 
finite domain constraint programming library, [[https://www.swi-prolog.org/man/clpfd.html][CLP(FD)]]).

** Example query

Load the sudook.pl file into your Prolog interpreter.

You'll see there is part of an example Sudoku already included in the .pl file. You can see the complete solution using this query: 

#+BEGIN_QUOTE
sudoku([A1, A2, A3, A4, A5, A6, A7, A8, A9, B1, B2, B3, B4, B5, B6, B7, B8, B9, C1, C2, C3, C4, C5, C6, C7, C8, C9, D1, D2, D3, D4, D5, D6, D7, D8, D9, E1, E2, E3, E4, E5, E6, E7, E8, E9, F1, F2, F3, F4, F5, F6, F7, F8, F9, G1, G2, G3, G4, G5, G6, G7, G8, G9, H1, H2, H3, H4, H5, H6, H7, H8, H9, I1, I2, I3, I4, I5, I6, I7, I8, I9]). 
#+END_QUOTE

Prolog will attempt to fill in the variables that are unknown (i.e. not already bound to numbers).

To solve your own Sudoku, either change the given examples in the .pl, or remove them completely and put constants into the Sudoku query itself along with unknown variables, like this:

#+BEGIN_QUOTE
sudoku([9, 7, A3, A4, A5, A6, A7, A8, A9, B1, B2, B3, B4, B5, B6, B7, B8, B9, C1, C2, C3, C4, C5, C6, C7, C8, C9, D1, D2, D3, D4, D5, D6, D7, D8, D9, E1, E2, E3, E4, E5, E6, E7, E8, E9, F1, F2, F3, F4, F5, F6, F7, F8, F9, G1, G2, G3, G4, G5, G6, G7, G8, G9, H1, H2, H3, H4, H5, H6, H7, H8, H9, I1, I2, I3, I4, I5, I6, I7, I8, I9]). 
#+END_QUOTE


